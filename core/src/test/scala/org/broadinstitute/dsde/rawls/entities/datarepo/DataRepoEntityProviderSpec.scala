package org.broadinstitute.dsde.rawls.entities.datarepo

import java.util.UUID

import bio.terra.workspace.model.DataReferenceDescription.ReferenceTypeEnum
import org.broadinstitute.dsde.rawls.entities.exceptions.DataEntityException
import org.broadinstitute.dsde.rawls.model.EntityTypeMetadata
import org.scalatest.{AsyncFlatSpec, Matchers}
import spray.json.{JsArray, JsNumber, JsObject, JsString}

class DataRepoEntityProviderSpec extends AsyncFlatSpec with DataRepoEntityProviderSpecSupport with Matchers {

  behavior of "DataEntityProvider.entityTypeMetadata()"

  it should "return entity type metadata in the golden path" in {
    val provider = createTestProvider()

    provider.entityTypeMetadata() map { metadata: Map[String, EntityTypeMetadata] =>
      // this is the default expected value, should it move to the support trait?
      val expected = Map(
        ("table1", EntityTypeMetadata(-1, "", Seq("col1.1", "col1.2"))),
        ("table2", EntityTypeMetadata(-1, "", Seq("col2.1", "col2.2"))))
      assertResult(expected) { metadata }
    }
  }

  it should "return an empty Map if data repo snapshot has no tables" in {
    val provider = createTestProvider(
      dataRepoDAO = new SpecDataRepoDAO(Right( createSnapshotModel( List.empty[(String, List[String])] ) )))

    provider.entityTypeMetadata() map { metadata: Map[String, EntityTypeMetadata] =>
      assert(metadata.isEmpty, "expected response data to be the empty map")
    }
  }

  it should "return empty columns if data repo snapshot tables but no columns" in {
    val provider = createTestProvider(
      dataRepoDAO = new SpecDataRepoDAO(Right( createSnapshotModel( List( ("foo", List.empty[String]), ("bar", List("one", "two")) ) ) )))

    val expected = Map(
      ("foo", EntityTypeMetadata(-1, "", Seq.empty[String])),
      ("bar", EntityTypeMetadata(-1, "", Seq("one", "two"))))

    provider.entityTypeMetadata() map { metadata: Map[String, EntityTypeMetadata] =>
      assertResult(expected) { metadata }
    }
  }

  it should "bubble up error if workspace manager errors" in {
    val provider = createTestProvider(
      workspaceManagerDAO = new SpecWorkspaceManagerDAO(Left(new bio.terra.workspace.client.ApiException("whoops 1"))))

    val ex = intercept[bio.terra.workspace.client.ApiException] { provider.entityTypeMetadata() }
    assertResult("whoops 1") { ex.getMessage }
  }

  it should "bubble up error if data repo errors" in {
    val provider = createTestProvider(
      dataRepoDAO = new SpecDataRepoDAO(Left(new bio.terra.datarepo.client.ApiException("whoops 2"))))

    val ex = intercept[bio.terra.datarepo.client.ApiException] { provider.entityTypeMetadata() }
    assertResult("whoops 2") { ex.getMessage }
  }

  // to-do: tests for different primary key values returned by data repo, if TDR ever supports this.
  // currently, TDR returns null for PKs in snapshots, and this is expected according to the TDR team,
  // with no concrete plans to change.

  // to-do: tests for entity/row counts returned by data repo, once TDR supports this (see DR-1003)

  behavior of "DataEntityProvider.lookupSnapshotForName()"

  it should "return snapshot id in the golden path" in {
    val provider = createTestProvider()
    val actual = provider.lookupSnapshotForName("foo")
    assertResult(UUID.fromString(snapshot)) { actual }
  }

  it should "bubble up error if workspace manager errors" in  {
    val provider = createTestProvider(
      workspaceManagerDAO = new SpecWorkspaceManagerDAO(Left(new bio.terra.workspace.client.ApiException("whoops 1"))))

    val ex = intercept[bio.terra.workspace.client.ApiException] { provider.lookupSnapshotForName("foo") }
    assertResult("whoops 1") { ex.getMessage }
  }

  it should "error if workspace manager returns a non-snapshot reference type" in {
    val provider = createTestProvider(
      workspaceManagerDAO = new SpecWorkspaceManagerDAO(Right(createDataRefDescription(referenceType = null)))
    )

    val ex = intercept[DataEntityException] { provider.lookupSnapshotForName("foo") }
    assertResult( s"Reference type value for foo is not of type ${ReferenceTypeEnum.DATAREPOSNAPSHOT.getValue}" ) { ex.getMessage }
  }

  it should "error if workspace manager returns something other than serialized json object in reference payload" in  {
    val provider = createTestProvider(
      workspaceManagerDAO = new SpecWorkspaceManagerDAO(Right(createDataRefDescription(refString = Some("not }{ json"))))
    )

    val ex = intercept[DataEntityException] { provider.lookupSnapshotForName("foo") }
    assert {
      // the remainder of the message is generated by the json parser and could change, we should not assert on it
      ex.getMessage.startsWith("Could not parse reference value for foo:")
    }
  }

  it should "error if workspace manager reference json does not contain `instance` key" in  {
    // we have to drop to raw JsObjects to test malformed responses, since these shouldn't happen normally
    // given type safety
    val badRefPayload = JsObject.apply(("snapshot", JsString(snapshot)))

    val provider = createTestProvider(
      workspaceManagerDAO = new SpecWorkspaceManagerDAO(Right(createDataRefDescription(refString = Some(badRefPayload.compactPrint))))
    )

    val ex = intercept[DataEntityException] { provider.lookupSnapshotForName("foo") }
    assertResult("Reference value for foo does not contain an instance value.") { ex.getMessage }
  }

  it should "error if workspace manager reference json `instance` key is not a string" in  {
    // we have to drop to raw JsObjects to test malformed responses, since these shouldn't happen normally
    // given type safety
    val badRefPayload = JsObject.apply(("instance", JsArray(JsNumber(1), JsNumber(2))), ("snapshot", JsString(snapshot)))

    val provider = createTestProvider(
      workspaceManagerDAO = new SpecWorkspaceManagerDAO(Right(createDataRefDescription(refString = Some(badRefPayload.compactPrint))))
    )

    val ex = intercept[DataEntityException] { provider.lookupSnapshotForName("foo") }
    assertResult("Reference value for foo does not contain an instance value.") { ex.getMessage }
  }

  it should "error if workspace manager reference json does not contain `snapshot` key" in  {
    // we have to drop to raw JsObjects to test malformed responses, since these shouldn't happen normally
    // given type safety
    val badRefPayload = JsObject.apply(("instance", JsString(dataRepoInstance)))

    val provider = createTestProvider(
      workspaceManagerDAO = new SpecWorkspaceManagerDAO(Right(createDataRefDescription(refString = Some(badRefPayload.compactPrint))))
    )

    val ex = intercept[DataEntityException] { provider.lookupSnapshotForName("foo") }
    assertResult("Reference value for foo does not contain a snapshot value.") { ex.getMessage }
  }

  it should "error if workspace manager reference json `snapshot` key is not a string" in {
    // we have to drop to raw JsObjects to test malformed responses, since these shouldn't happen normally
    // given type safety
    val badRefPayload = JsObject.apply(("instance", JsString(dataRepoInstance)), ("snapshot", JsArray(JsNumber(1), JsNumber(2))))

    val provider = createTestProvider(
      workspaceManagerDAO = new SpecWorkspaceManagerDAO(Right(createDataRefDescription(refString = Some(badRefPayload.compactPrint))))
    )

    val ex = intercept[DataEntityException] { provider.lookupSnapshotForName("foo") }
    assertResult("Reference value for foo does not contain a snapshot value.") { ex.getMessage }
  }

  it should "error if workspace manager reference json `instance` value does not match DataRepoDAO's base url" in {
    val provider = createTestProvider(
      workspaceManagerDAO = new SpecWorkspaceManagerDAO(Right(createDataRefDescription(refInstance = "this is wrong")))
    )

    val ex = intercept[DataEntityException] { provider.lookupSnapshotForName("foo") }
    assertResult("Reference value for foo contains an unexpected instance value") { ex.getMessage }
  }

  it should "error if workspace manager reference json `snapshot` value is not a valid UUID" in {
    val provider = createTestProvider(
      workspaceManagerDAO = new SpecWorkspaceManagerDAO(Right(createDataRefDescription(refSnapshot = "this is not a uuid")))
    )

    val ex = intercept[DataEntityException] { provider.lookupSnapshotForName("foo") }
    assertResult("Reference value for foo contains an unexpected snapshot value") { ex.getMessage }
  }


}



