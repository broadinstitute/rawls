akka {
  loglevel = OFF
  logger-startup-timeout = 20s
}

submission-monitor-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 20
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 1
}

submissionmonitor {
  trackDetailedSubmissionMetrics = true
  attributeUpdatesPerWorkflow = 20000
}

integration.runFullLoadTest = false

backRawls = true

mysql {
  driver = "slick.driver.MySQLDriver$"
  # batchSize is used for writes, to group inserts/updates
  # this must be explicitly utilized via custom business logic
  batchSize = 5000
  # fetchSize is used during Slick streaming to set the size of pages
  # this must be explicitly set via withStatementParameters
  fetchSize = 5000
  host = "localhost"
  port = 3310
  db {
    url = "jdbc:mysql://"${mysql.host}":"${mysql.port}"/testdb?createDatabaseIfNotExist=true&useSSL=false&rewriteBatchedStatements=true"
    driver = com.mysql.jdbc.Driver
    user = "rawls-test"
    password = "rawls-test"
    connectionTimeout = "5 seconds"  // default of 1 sec sometimes too short for docker local mysql
  }
}

// TODO: programatically modify the above DB Config object instead?
mysql-low-thread-count {
  driver = "slick.driver.MySQLDriver$"
  # batchSize is used for writes, to group inserts/updates
  # this must be explicitly utilized via custom business logic
  batchSize = 5000
  # fetchSize is used during Slick streaming to set the size of pages
  # this must be explicitly set via withStatementParameters
  fetchSize = 5000
  host = "localhost"
  port = 3310
  db {
    url = "jdbc:mysql://"${mysql.host}":"${mysql.port}"/testdb?createDatabaseIfNotExist=true&useSSL=false&rewriteBatchedStatements=true"
    driver = com.mysql.jdbc.Driver
    user = "rawls-test"
    password = "rawls-test"
    connectionTimeout = "5 seconds"  // default of 1 sec sometimes too short for docker local mysql
    numThreads = 2
  }
}


liquibase {
  changelog = "org/broadinstitute/dsde/rawls/liquibase/changelog.xml"
}

entityUpsert {
  maxContentSizeBytes = 67108864
}

entityStatisticsCache {
  enabled = true
  timeoutPerWorkspace = 1 minute
  standardPollInterval = 1 minute
  workspaceCooldown = 0 minutes
}

gcs {
  bucketLogsMaxAge = "180"
  pathToCredentialJson = "fakePathToCredential"
  groupsPrefix = "fc-"

  deploymentManager {
    #these aren't real
    templatePath = "path/to/template"
    projectID = "deployment-manager-test"
    orgID = 1234567890
    billingProbeEmail = "billingprobe@deployment-manager-test.iam.gserviceaccount.com"
  }

  projectTemplate {
    # note that all members of owners must be in the same domain as billingEmail, this includes any group members
    owners = ["group:project-owners@test.org"]
    editors = ["serviceAccount:ed-sa1@test.org", "serviceAccount:ed-sa2@test.org"]
    ownerGrantableRoles = ["google.role1"]
  }

  servicePerimeters {
    staticProjects = {
      "accessPolicies/123456789/servicePerimeters/nameOfPerimeter": ["987654321"]
    }
    pollInterval = 1s
    pollTimeout = 50s
  }
}

dataRepo {
  terraInstance = "mock"
  enabled = true
}

resourceBuffer {
  projectPool {
    regular = "dev-project-regular-v1"
    exfiltrationControlled = "dev-project-exfiltrationcontrolled-v1"
  }
  url = "fakeUrl"
  saEmail = "fake-email@test.firecloud.org"
}
