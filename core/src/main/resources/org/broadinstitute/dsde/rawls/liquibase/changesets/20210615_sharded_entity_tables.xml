<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog logicalFilePath="dummy" xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">

    <!-- create db functions and stored procedures that will help with the db migration -->
    <changeSet logicalFilePath="dummy" author="davidan" id="create_shard_functions_and_procedures">
        <sql stripComments="true" endDelimiter="/">
            -- function to produce a shard identifier from a workspace uuid string
            -- important: the values produced by this function must match exactly the values produced by Rawls scala code
            -- and the values inserted into 'shards' above
            DROP FUNCTION IF EXISTS shardIdentifier /
            CREATE FUNCTION shardIdentifier(workspaceId CHAR(32))
            RETURNS CHAR(4) DETERMINISTIC
            BEGIN
                -- this function produces 32 shards
                DECLARE stringToInspect CHAR(2);
                DECLARE secondCharToInspect CHAR(1);
                DECLARE shardIdPart1 CHAR(1);
                DECLARE shardIdPart2 CHAR(2);

                SET stringToInspect = SUBSTRING(workspaceId,1,2);
                SET secondCharToInspect = SUBSTRING(stringToInspect,2,1);

                -- first part of the shard id is equal to the first char of the workspace id, 16 possible values
                SET shardIdPart1 = SUBSTRING(stringToInspect,1,1);
                -- second part of the shard id produces 2 values: 0-7 and 8-f
                IF secondCharToInspect >= '0' &amp;&amp; secondCharToInspect &lt;= '7' THEN
                    SET shardIdPart2 = '07';
                ELSE
                    SET shardIdPart2 = '8f';
                END IF;

                RETURN CONCAT(shardIdPart1, '_', shardIdPart2);
            END /

            -- procedure to create a shard table
            DROP PROCEDURE IF EXISTS createEntityAttributeShard /
            CREATE PROCEDURE createEntityAttributeShard(IN shardIdentifier CHAR(4))
            BEGIN
                SET @tableSuffix := shardIdentifier;
                SET @sql_text:=CONCAT('CREATE TABLE ENTITY_ATTRIBUTE_',@tableSuffix,' ('
                    ' id bigint(20) unsigned NOT NULL AUTO_INCREMENT,'
                    ' name varchar(200) NOT NULL,'
                    ' value_string text,'
                    ' value_number double DEFAULT NULL,'
                    ' value_boolean bit(1) DEFAULT NULL,'
                    ' value_entity_ref bigint(20) unsigned DEFAULT NULL,'
                    ' list_index int(11) DEFAULT NULL,'
                    ' owner_id bigint(20) unsigned NOT NULL,'
                    ' list_length int(11) DEFAULT NULL,'
                    ' namespace varchar(32) NOT NULL DEFAULT ''default'','
                    ' VALUE_JSON longtext,'
                    ' deleted bit(1) DEFAULT b''0'','
                    ' deleted_date timestamp(6) NULL DEFAULT NULL,'
                    ' PRIMARY KEY (id),'
                    ' KEY FK_ENT_ATTRIBUTE_ENTITY_REF (value_entity_ref),'
                    ' KEY UNQ_ENTITY_ATTRIBUTE (owner_id,namespace,name,list_index),'
                    ' CONSTRAINT FK_ATTRIBUTE_PARENT_ENTITY_',@tableSuffix,' FOREIGN KEY (owner_id) REFERENCES ENTITY (id),'
                    ' CONSTRAINT FK_ENT_ATTRIBUTE_ENTITY_REF_',@tableSuffix,' FOREIGN KEY (value_entity_ref) REFERENCES ENTITY (id)'
                    ') ENGINE=InnoDB AUTO_INCREMENT=231805857 DEFAULT CHARSET=utf8;');
                PREPARE stmt from @sql_text;
                EXECUTE stmt;
            END /

            -- procedure to copy rows from ENTITY_ATTRIBUTE to the appropriate shard table,
            -- based on the attributes' owning workspace
            DROP PROCEDURE IF EXISTS copyRowsToAttributeShard /
            CREATE PROCEDURE copyRowsToAttributeShard(IN shardIdentifier CHAR(4))
            BEGIN
                SET @tableSuffix := shardIdentifier;

                SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
                SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
                SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

                SET @sql_text:=CONCAT('INSERT INTO ENTITY_ATTRIBUTE_',@tableSuffix,'(id, name, value_string, value_number, value_boolean,'
                    ' value_entity_ref, list_index, owner_id, list_length, namespace, VALUE_JSON, deleted, deleted_date)'
                    'SELECT ea.id, ea.name, ea.value_string, ea.value_number, ea.value_boolean,'
                    ' ea.value_entity_ref, ea.list_index, ea.owner_id, ea.list_length, ea.namespace, ea.VALUE_JSON, ea.deleted, ea.deleted_date'
                    ' FROM ENTITY_ATTRIBUTE ea, ENTITY e, WORKSPACE w'
                    ' WHERE e.workspace_id = w.id'
                    ' AND ea.owner_id = e.id'
                    ' AND shardIdentifier(hex(w.id)) = ''',@tableSuffix,''''
                    ' ORDER BY ea.id;');
                PREPARE stmt from @sql_text;
                EXECUTE stmt;

                SET SQL_MODE=@OLD_SQL_MODE;
                SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
                SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

            END /

            -- convenience procedure to both create a shard and copy rows into it
            DROP PROCEDURE IF EXISTS createAndPopulateShard /
            CREATE PROCEDURE createAndPopulateShard(IN shardIdentifier CHAR(4))
            BEGIN
                CALL createEntityAttributeShard(shardIdentifier);
                CALL copyRowsToAttributeShard(shardIdentifier);
            END /
        </sql>
        <rollback>
            DROP PROCEDURE IF EXISTS copyRowsToAttributeShard;
            DROP PROCEDURE IF EXISTS createEntityAttributeShard;
            DROP FUNCTION IF EXISTS shardIdentifier;
        </rollback>
    </changeSet>

    <!-- START create and populate each shard in its own changeset. If we hit an error with an
            individual shard, we can restart the liquibase migration at that point,
            and don't have to rollback any progress up to that changeset. -->
    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_0_07">
        <sql>call createAndPopulateShard('0_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_0_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_0_8f">
        <sql>call createAndPopulateShard('0_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_0_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_1_07">
        <sql>call createAndPopulateShard('1_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_1_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_1_8f">
        <sql>call createAndPopulateShard('1_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_1_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_2_07">
        <sql>call createAndPopulateShard('2_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_2_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_2_8f">
        <sql>call createAndPopulateShard('2_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_2_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_3_07">
        <sql>call createAndPopulateShard('3_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_3_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_3_8f">
        <sql>call createAndPopulateShard('3_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_3_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_4_07">
        <sql>call createAndPopulateShard('4_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_4_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_4_8f">
        <sql>call createAndPopulateShard('4_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_4_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_5_07">
        <sql>call createAndPopulateShard('5_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_5_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_5_8f">
        <sql>call createAndPopulateShard('5_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_5_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_6_07">
        <sql>call createAndPopulateShard('6_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_6_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_6_8f">
        <sql>call createAndPopulateShard('6_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_6_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_7_07">
        <sql>call createAndPopulateShard('7_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_7_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_7_8f">
        <sql>call createAndPopulateShard('7_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_7_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_8_07">
        <sql>call createAndPopulateShard('8_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_8_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_8_8f">
        <sql>call createAndPopulateShard('8_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_8_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_9_07">
        <sql>call createAndPopulateShard('9_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_9_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_9_8f">
        <sql>call createAndPopulateShard('9_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_9_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_a_07">
        <sql>call createAndPopulateShard('a_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_a_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_a_8f">
        <sql>call createAndPopulateShard('a_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_a_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_b_07">
        <sql>call createAndPopulateShard('b_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_b_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_b_8f">
        <sql>call createAndPopulateShard('b_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_b_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_c_07">
        <sql>call createAndPopulateShard('c_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_c_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_c_8f">
        <sql>call createAndPopulateShard('c_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_c_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_d_07">
        <sql>call createAndPopulateShard('d_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_d_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_d_8f">
        <sql>call createAndPopulateShard('d_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_d_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_e_07">
        <sql>call createAndPopulateShard('e_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_e_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_e_8f">
        <sql>call createAndPopulateShard('e_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_e_8f;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_f_07">
        <sql>call createAndPopulateShard('f_07');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_f_07;</rollback>
    </changeSet>

    <changeSet logicalFilePath="dummy" author="davidan" id="create_and_populate_shard_f_8f">
        <sql>call createAndPopulateShard('f_8f');</sql>
        <rollback>DROP TABLE IF EXISTS ENTITY_ATTRIBUTE_f_8f;</rollback>
    </changeSet>
    <!-- END create and populate each shard in its own changeset. If we hit an error with an
            individual shard, we can restart the liquibase migration at that point,
            and don't have to rollback any progress up to that changeset. -->

    <!-- finally, move the old ENTITY_ATTRIBUTE table out of the way -->
    <changeSet logicalFilePath="dummy" author="davidan" id="archive_entity_attribute_table">
        <sql>RENAME TABLE ENTITY_ATTRIBUTE to ENTITY_ATTRIBUTE_archived;</sql>
        <rollback>
            RENAME TABLE ENTITY_ATTRIBUTE_archived to ENTITY_ATTRIBUTE;
        </rollback>
    </changeSet>

</databaseChangeLog>
