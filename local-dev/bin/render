#!/bin/bash

set -eo pipefail

PROJECT_ID="broad-dsde-dev"

# Helper function to fetch secrets
fetch_secret() {
  gcloud secrets versions access latest --project "$PROJECT_ID" --secret "$1"
}

##Pull mysql instance info for sqlproxy##
RAWLS_MYSQL_INSTANCE_JSON=$(gcloud secrets versions access latest  --project broad-dsde-dev --secret rawls-mysql-instance)

# Extract the name and zone values using jq
CLOUDSQL_ZONE=$(echo "$RAWLS_MYSQL_INSTANCE_JSON" | jq -r '.zone')
CLOUDSQL_INSTANCE=$(echo "$RAWLS_MYSQL_INSTANCE_JSON" | jq -r '.name')

# Define the template and output file paths
MYSQL_TEMPLATE_FILE="local-dev/templates/sqlproxy.env"
MYSQL_OUTPUT_FILE="config/sqlproxy.env"

# Replace placeholders in the template file with the fetched secret values
sed -e "s/{{ \$secret.zone }}/$CLOUDSQL_ZONE/" \
    -e "s/{{ \$secret.name }}/$CLOUDSQL_INSTANCE/" \
    "$MYSQL_TEMPLATE_FILE" > "$MYSQL_OUTPUT_FILE"

#Files to copy directly to config##
cp local-dev/templates/docker-rsync-local-rawls.sh config/docker-rsync-local-rawls.sh
cp local-dev/templates/liquibase.properties config/liquibase.properties
cp local-dev/templates/local-mysql.conf config/local-mysql.conf
cp local-dev/templates/local-sam.conf config/local-sam.conf
cp local-dev/templates/mod_security_ignore.conf config/mod_security_ignore.conf
cp local-dev/templates/oauth2.conf config/oauth2.conf
cp local-dev/templates/site.conf config/site.conf

##Files to download from secrets##
#gcloud secrets versions access latest --project broad-dsde-dev --secret rawls-sa > config/rawls-account.json
fetch_secret "rawls-sa" > config/rawls-account.json
fetch_secret "rawls-sa" > config/sqlproxy-service-account.json
fetch_secret "rawls-sa-pem" | jq -r '."key.pem"' > config/rawls-account.pem
fetch_secret "rawls-bigquery-sa" > config/bigquery-account.json
fetch_secret "rawls-billing-sa" | jq -r '."key.pem"' > config/billing-account.pem
fetch_secret "buffer-client-sa-b64" | jq -r '.key' | base64 --decode > config/buffer-account.json

gcloud container clusters get-credentials --zone us-central1-a --project broad-dsde-dev terra-dev
kubectl -n local-dev get secrets local-dev-cert -o 'go-template={{index .data "tls.crt"}}' | base64 --decode > config/server.crt
kubectl -n local-dev get secrets local-dev-cert -o 'go-template={{index .data "tls.key"}}' | base64 --decode > config/server.key

## Secrets to pull for rawls.conf ##
RAWLS_OAUTH_CREDS_JSON=$(fetch_secret "rawls-oauth-creds")
RAWLS_CONF_JSON=$(fetch_secret "rawls-conf")
RAWLS_REFRESH_TOKEN_CRED_JSON=$(fetch_secret "refresh-token-oauth-credential")
RAWLS_SAKEY_JSON=$(fetch_secret "rawls-sa")
CROMWELL_SAKEY_JSON=$(fetch_secret "cromwell-sa")
B2C_APPID_JSON=$(fetch_secret "b2c-application-id")
LANDING_ZONE_POSTGRES_JSON=$(fetch_secret "wsm-azure-postgres-creds")
FIRECLOUD_SECRETS=$(fetch_secret "firecloud-misc-secrets")

# Extract the secret values using jq
GOOGLE_CLIENT_TOKEN=$(echo "$RAWLS_REFRESH_TOKEN_CRED_JSON" | jq -r '.value | fromjson | .web')
CLIENT_EMAIL=$(echo "$RAWLS_SAKEY_JSON" | jq -r '.client_email')
GCS_TOKENENCRYPTIONKEY=$(echo "$RAWLS_CONF_JSON" | jq -r '.gcs_tokenEncryptionKey')
RAWLS_SLICK_USER=$(echo "$RAWLS_CONF_JSON" | jq -r '.slick_db_user')
RAWLS_SLICK_PASSWORD=$(echo "$RAWLS_CONF_JSON" | jq -r '.slick_db_password' | sed -e 's/[\/&]/\\&/g')
GOOGLE_CLIENT_ID=$(echo "$GOOGLE_CLIENT_TOKEN" | jq -r '.client_id')
POSTGRES_DB_ADMIN=$(echo "$LANDING_ZONE_POSTGRES_JSON" | jq -r '.username')
POSTGRES_DB_PASSWORD=$(echo "$LANDING_ZONE_POSTGRES_JSON" | jq -r '.password' | sed -e 's/[\/&]/\\&/g')
b2cAppId=$(echo "$B2C_APPID_JSON" | jq -r '.value')
ESCAPED_RAWLS_REFRESH_TOKEN_CRED_JSON=$(echo "$RAWLS_REFRESH_TOKEN_CRED_JSON" | jq -r '.value' | sed -e 's/[\/&]/\\&/g')
ESCAPED_RAWLS_OAUTH_CREDS_JSON=$(echo "$RAWLS_OAUTH_CREDS_JSON" | jq -r '.value' | sed -e 's/[\/&]/\\&/g')
ADMIN_BILLING_ACCOUNT=$(echo "$FIRECLOUD_SECRETS" | jq -r '.trial_billing_account' | sed -e 's/[\/&]/\\&/g')

# Define the template and output file paths
RAWLS_TEMPLATE_FILE="local-dev/templates/rawls.conf"
RAWLS_OUTPUT_FILE="config/rawls.conf"

# Replace placeholders in the template file with the fetched secret values
sed -e "s/{{ \$appsDomain }}/$APPS_DOMAIN/" \
    -e "s/{{ \$appsSubDomain }}/$APPS_SUBDOMAIN/" \
    -e "s/{{ \$rawlsSaKey.client_email }}/$CLIENT_EMAIL/" \
    -e "s/{{ \$rawlsConf.gcs_tokenEncryptionKey }}/$GCS_TOKENENCRYPTIONKEY/" \
    -e "s/{{ \$refreshTokenCredentialWebClientId }}/$GOOGLE_CLIENT_ID/" \
    -e "s/{{ \$landingZonePostgres.username }}/$POSTGRES_DB_ADMIN/" \
    -e "s/{{ \$landingZonePostgres.password }}/$POSTGRES_DB_PASSWORD/" \
    -e "s/{{ \$b2cAppId }}/$b2cAppId/" \
    -e "s/{{ \$rawlsOauthCredential }}/$ESCAPED_RAWLS_OAUTH_CREDS_JSON/" \
    -e "s/{{ \$refreshTokenCredential }}/$ESCAPED_RAWLS_REFRESH_TOKEN_CRED_JSON/" \
    -e "s/{{ \$rawlsConf.slick_db_user }}/$RAWLS_SLICK_USER/" \
    -e "s/{{ \$rawlsConf.slick_db_password }}/$RAWLS_SLICK_PASSWORD/" \
    -e "s/{{ \$adminBillingAccount }}/$ADMIN_BILLING_ACCOUNT/" \
    "$RAWLS_TEMPLATE_FILE" > "$RAWLS_OUTPUT_FILE"


